

------Time complexity 
-- big-o-cheatsheet.pdf

Big O notation give the upper bound worst complexity for the Algo.

Constant time - O(1)
Linear Time - O(n)
Quadratic time - O(n^2)
Logarithmic time -  O(log n)
	log base 2 applies. However, since Big O notation only concerns
    itself with the shape of the performance, the actual base doesn’t matter.
    Base 2 logarithms are frequently used in computer science due to the binary nature
    Example: log₂(8) = 3, because 2^3 = 8.
Quasilinear time - O(n log n)
	worse than linear time but dramatically better than quadratic time

others
polynomial time, exponential time: O(b^n), factorial time O(n!)



--------Big-0 Examples
i=0
While i < 3 * n Do
    j = 10
    While j <= 50 Do
        j=j+1
    j=0
    While j < n*n*n Do
        j=j+2
    i=i+1

f(n) = 3n * (40 + n^3/2) = 3n/40 + 3n^4/2
0(f(n)) = 0(n4) //


Finding all subsets of a set - 0(2^n)
Finding all permutations of a string - O(n!)
Sorting using mergesort - O(nlog(n))
Iterating over all the cells in a matrix of size n by m - O(nm)




-------Collection interfaces
Four important collection interfaces.

Tier 1, Iterable: An iterable type provides sequential access to its elements via an Iterator .
Tier 2, Collection: A collection is an iterable that provides additional functionality, allowingyou to check if the collection contains a particular element or a collection of elements.
Tier 3, MutableIterable: An iterable that provides a MutableIterator , which allows both
accessing the items and removing them.
Tier 4, MutableCollection: A collection that also provides methods to alter its contained
items. For example, you can add and remove elements, and even clear the entire collection.
