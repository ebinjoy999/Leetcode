


val list = ArrayList<Boolean>(candies.size)

val prefixSum = IntArray(nums.size)

val vowels = setOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
vowels.contains(sChars[i])

val ll: LinkedList<Pair<TreeNode?, Int>> = LinkedList()
	ll.add(Pair(tRoot, depth)) //Appends to the end of this list (Act as queue)
	ll.peek() //Retrive the first element
	ll.pop()  //element at the front of this list (which is the top of the stack represented by list)
	ll.push() //inserts the element at the front of this list (Pushes element to stack represented by list.)



  val provinces = arrayListOf<Set<Int>>()



  arr.sort()
  arr.sortDescending()



Queue: 
enqueue() – Insertion of elements to the queue.
dequeue() – Removal of elements from the queue.
peek() or front()- Acquires the data element available at the front node of the queue without deleting it.
rear() – This operation returns the element at the rear end without removing it.
isFull() – Validates if the queue is full.
isEmpty() – Checks if the queue is empty.

Stack:
push() to insert an element into the stack
pop() to remove an element from the stack
top() Returns the top element of the stack.
isEmpty() returns true if stack is empty else false.
isFull() returns true if the stack is full else false.